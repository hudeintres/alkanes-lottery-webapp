{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///testbed/contexts/WalletContext.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { LaserEyesProvider, useLaserEyes } from '@omnisat/lasereyes-react';\nimport { BTC } from '@omnisat/lasereyes-core';\n\ninterface WalletContextType {\n  isConnected: boolean;\n  address: string | null;\n  publicKey: string | null;\n  balance: number | null;\n  connect: () => Promise<void>;\n  disconnect: () => Promise<void>;\n  signMessage?: (message: string) => Promise<string>;\n  sendBitcoin?: (to: string, amount: number) => Promise<string>;\n}\n\nconst WalletContext = createContext<WalletContextType | undefined>(undefined);\n\nexport function useWallet() {\n  const context = useContext(WalletContext);\n  if (context === undefined) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n}\n\ninterface WalletProviderProps {\n  children: ReactNode;\n}\n\nexport function WalletProvider({ children }: WalletProviderProps) {\n  const { isConnected, address, publicKey, balance, connect, disconnect } = useLaserEyes();\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  const walletContextValue: WalletContextType = {\n    isConnected: mounted ? isConnected : false,\n    address: mounted ? address : null,\n    publicKey: mounted ? publicKey : null,\n    balance: mounted ? (balance ? Number(balance) / 100000000 : null) : null, // Convert satoshis to BTC\n    connect,\n    disconnect,\n  };\n\n  return (\n    <WalletContext.Provider value={walletContextValue}>\n      {children}\n    </WalletContext.Provider>\n  );\n}\n\n// This component wraps the entire app with LaserEyes provider\nexport function WalletProviderWrapper({ children }: { children: ReactNode }) {\n  return (\n    <LaserEyesProvider\n      config={{\n        network: 'mainnet', // or 'testnet', 'regtest'\n      }}\n    >\n      <WalletProvider>\n        {children}\n      </WalletProvider>\n    </LaserEyesProvider>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;AAEA;AACA;;;AAHA;;;AAiBA,MAAM,8BAAgB,IAAA,8KAAa,EAAgC;AAE5D,SAAS;;IACd,MAAM,UAAU,IAAA,2KAAU,EAAC;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;GANgB;AAYT,SAAS,eAAe,EAAE,QAAQ,EAAuB;;IAC9D,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,IAAA,mLAAY;IACtF,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,yKAAQ,EAAC;IAEvC,IAAA,0KAAS;oCAAC;YACR,WAAW;QACb;mCAAG,EAAE;IAEL,MAAM,qBAAwC;QAC5C,aAAa,UAAU,cAAc;QACrC,SAAS,UAAU,UAAU;QAC7B,WAAW,UAAU,YAAY;QACjC,SAAS,UAAW,UAAU,OAAO,WAAW,YAAY,OAAQ;QACpE;QACA;IACF;IAEA,qBACE,6LAAC,cAAc,QAAQ;QAAC,OAAO;kBAC5B;;;;;;AAGP;IAtBgB;;QAC4D,mLAAY;;;KADxE;AAyBT,SAAS,sBAAsB,EAAE,QAAQ,EAA2B;IACzE,qBACE,6LAAC,wLAAiB;QAChB,QAAQ;YACN,SAAS;QACX;kBAEA,cAAA,6LAAC;sBACE;;;;;;;;;;;AAIT;MAZgB","debugId":null}}]
}