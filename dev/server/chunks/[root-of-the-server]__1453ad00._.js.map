{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///testbed/app/api/jackpot/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\n// Mock jackpot data - in real app, this would come from smart contracts\nexport async function GET() {\n    const jackpotData = {\n        currentAmount: \"25.5\", // BTC\n        totalTicketsSold: 25500,\n        timeUntilNextDraw: \"2:45:30\", // HH:MM:SS\n        nextDrawBlock: 874123,\n        lastWinner: {\n            address: \"bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh\", // Mock address\n            amount: \"18.7\",\n            date: \"2024-01-15T00:00:00Z\"\n        },\n        recentDraws: [\n            {\n                block: 873979,\n                winner: \"bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh\",\n                amount: \"18.7\",\n                date: \"2024-01-15T00:00:00Z\"\n            },\n            {\n                block: 873835,\n                winner: \"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4\",\n                amount: \"12.3\",\n                date: \"2024-01-14T00:00:00Z\"\n            }\n        ]\n    };\n\n    return NextResponse.json(jackpotData);\n}\n\nexport async function POST(request: Request) {\n    try {\n        const body = await request.json();\n\n        // TODO: Implement smart contract interaction using oyl-sdk\n        // const result = await executeWithBtcWrapUnwrap(/* contract call params */);\n\n        // Mock response for ticket purchase\n        const mockResponse = {\n            success: true,\n            transactionId: \"mock-tx-\" + Date.now(),\n            ticketNumbers: [\"A1B2C3\", \"D4E5F6\", \"G7H8I9\"],\n            message: \"Tickets purchased successfully!\"\n        };\n\n        return NextResponse.json(mockResponse);\n    } catch (error) {\n        return NextResponse.json(\n            { success: false, error: \"Failed to purchase tickets\" },\n            { status: 500 }\n        );\n    }\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAGO,eAAe;IAClB,MAAM,cAAc;QAChB,eAAe;QACf,kBAAkB;QAClB,mBAAmB;QACnB,eAAe;QACf,YAAY;YACR,SAAS;YACT,QAAQ;YACR,MAAM;QACV;QACA,aAAa;YACT;gBACI,OAAO;gBACP,QAAQ;gBACR,QAAQ;gBACR,MAAM;YACV;YACA;gBACI,OAAO;gBACP,QAAQ;gBACR,QAAQ;gBACR,MAAM;YACV;SACH;IACL;IAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;AAC7B;AAEO,eAAe,KAAK,OAAgB;IACvC,IAAI;QACA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,2DAA2D;QAC3D,6EAA6E;QAE7E,oCAAoC;QACpC,MAAM,eAAe;YACjB,SAAS;YACT,eAAe,aAAa,KAAK,GAAG;YACpC,eAAe;gBAAC;gBAAU;gBAAU;aAAS;YAC7C,SAAS;QACb;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,OAAO,gJAAY,CAAC,IAAI,CACpB;YAAE,SAAS;YAAO,OAAO;QAA6B,GACtD;YAAE,QAAQ;QAAI;IAEtB;AACJ","debugId":null}}]
}