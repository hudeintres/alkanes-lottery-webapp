{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///testbed/app/api/tickets/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\n// Mock ticket data - in real app, this would come from database/blockchain\nconst mockTickets = [\n    {\n        id: \"1\",\n        purchaseDate: \"2024-01-15T10:30:00Z\",\n        ticketNumbers: [\"A1B2C3\", \"D4E5F6\", \"G7H8I9\"],\n        amount: \"0.003\",\n        status: \"active\",\n        drawDate: \"2024-01-16T00:00:00Z\",\n        isWinner: false,\n        userAddress: \"bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh\"\n    },\n    {\n        id: \"2\",\n        purchaseDate: \"2024-01-14T14:20:00Z\",\n        ticketNumbers: [\"J1K2L3\", \"M4N5O6\"],\n        amount: \"0.002\",\n        status: \"completed\",\n        drawDate: \"2024-01-15T00:00:00Z\",\n        isWinner: true,\n        winnings: \"0.5\",\n        userAddress: \"bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh\"\n    },\n    {\n        id: \"3\",\n        purchaseDate: \"2024-01-13T09:15:00Z\",\n        ticketNumbers: [\"P7Q8R9\", \"S1T2U3\", \"V4W5X6\", \"Y7Z8A9\"],\n        amount: \"0.004\",\n        status: \"completed\",\n        drawDate: \"2024-01-14T00:00:00Z\",\n        isWinner: false,\n        userAddress: \"bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh\"\n    },\n];\n\nexport async function GET(request: Request) {\n    const { searchParams } = new URL(request.url);\n    const userAddress = searchParams.get('userAddress');\n\n    if (!userAddress) {\n        return NextResponse.json(\n            { error: \"User address is required\" },\n            { status: 400 }\n        );\n    }\n\n    // Filter tickets by user address\n    const userTickets = mockTickets.filter(ticket => ticket.userAddress === userAddress);\n\n    // TODO: In real app, fetch from database or smart contract\n    // const tickets = await getUserTickets(userAddress);\n\n    return NextResponse.json(userTickets);\n}\n\nexport async function POST(request: Request) {\n    try {\n        const body = await request.json();\n\n        // TODO: Implement smart contract interaction using oyl-sdk\n        // const result = await executeWithBtcWrapUnwrap(/* contract call params */);\n\n        // Mock response for storing ticket purchase\n        const mockResponse = {\n            success: true,\n            tickets: [\n                {\n                    id: Date.now().toString(),\n                    purchaseDate: new Date().toISOString(),\n                    ticketNumbers: [\"T1I2C3\", \"K4E5T6\", \"L7U8C9\"], // Mock numbers\n                    amount: body.amount || \"0.001\",\n                    status: \"active\",\n                    drawDate: \"2024-01-16T00:00:00Z\", // Next draw\n                    isWinner: false,\n                    userAddress: body.userAddress\n                }\n            ],\n            message: \"Tickets purchased and stored successfully!\"\n        };\n\n        return NextResponse.json(mockResponse);\n    } catch (error) {\n        return NextResponse.json(\n            { success: false, error: \"Failed to store tickets\" },\n            { status: 500 }\n        );\n    }\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,2EAA2E;AAC3E,MAAM,cAAc;IAChB;QACI,IAAI;QACJ,cAAc;QACd,eAAe;YAAC;YAAU;YAAU;SAAS;QAC7C,QAAQ;QACR,QAAQ;QACR,UAAU;QACV,UAAU;QACV,aAAa;IACjB;IACA;QACI,IAAI;QACJ,cAAc;QACd,eAAe;YAAC;YAAU;SAAS;QACnC,QAAQ;QACR,QAAQ;QACR,UAAU;QACV,UAAU;QACV,UAAU;QACV,aAAa;IACjB;IACA;QACI,IAAI;QACJ,cAAc;QACd,eAAe;YAAC;YAAU;YAAU;YAAU;SAAS;QACvD,QAAQ;QACR,QAAQ;QACR,UAAU;QACV,UAAU;QACV,aAAa;IACjB;CACH;AAEM,eAAe,IAAI,OAAgB;IACtC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,cAAc,aAAa,GAAG,CAAC;IAErC,IAAI,CAAC,aAAa;QACd,OAAO,gJAAY,CAAC,IAAI,CACpB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAEtB;IAEA,iCAAiC;IACjC,MAAM,cAAc,YAAY,MAAM,CAAC,CAAA,SAAU,OAAO,WAAW,KAAK;IAExE,2DAA2D;IAC3D,qDAAqD;IAErD,OAAO,gJAAY,CAAC,IAAI,CAAC;AAC7B;AAEO,eAAe,KAAK,OAAgB;IACvC,IAAI;QACA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,2DAA2D;QAC3D,6EAA6E;QAE7E,4CAA4C;QAC5C,MAAM,eAAe;YACjB,SAAS;YACT,SAAS;gBACL;oBACI,IAAI,KAAK,GAAG,GAAG,QAAQ;oBACvB,cAAc,IAAI,OAAO,WAAW;oBACpC,eAAe;wBAAC;wBAAU;wBAAU;qBAAS;oBAC7C,QAAQ,KAAK,MAAM,IAAI;oBACvB,QAAQ;oBACR,UAAU;oBACV,UAAU;oBACV,aAAa,KAAK,WAAW;gBACjC;aACH;YACD,SAAS;QACb;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,OAAO,gJAAY,CAAC,IAAI,CACpB;YAAE,SAAS;YAAO,OAAO;QAA0B,GACnD;YAAE,QAAQ;QAAI;IAEtB;AACJ","debugId":null}}]
}